[project]
name = "swiftsim-cli"

# Dynamic version numbers from git
dynamic = ["version"]

# Tagline for SWIFTSim CLI
description = "A package full of helpers and tools for running SWIFT simulations."

# A longer description of Synthesizer
readme = "README.md"

# Minimum Python version
requires-python = ">=3.9"

# The licence
license = {file = "LICENSE.md"}

# Project keywords
keywords =[
  "galaxy",
  "modelling",
  "smoothed particle hydrodynamics",
  "particles",
  "nbody",
  "galaxy formation",
  "theory",
  "sph",
  "cosmology",
  "galaxy evolution",
  "command line",
  "cli",
]

# SWIFTSim-CLI authors
authors = [
  {name = "W. J. Roper", email = "w.roper@sussex.ac.uk" },
]

# SWIFTSim-CLI maintainers
maintainers = [
  {name = "W. J. Roper", email = "w.roper@sussex.ac.uk" },
]

# Classifiers
classifiers = [  # Optional
  "Development Status :: 4 - Beta",  # 3 Alpha/4 Beta/5 Production/Stable
  "Intended Audience :: Science/Research",
  "Topic :: Scientific/Engineering :: Astronomy",
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",

  # Supported Python versions
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
]

# Dependencies
dependencies = [
  "setuptools",
  "astropy",
  "h5py",
  "numpy >= 1.23",
  "packaging",
  "scipy",
  "unyt",
  "prompt_toolkit",
  "ruamel.yaml",  # Fixed: should be ruamel.yaml not ruamel_yaml
  "PyYAML",       # Added: used in profile.py and modes/profile.py
  "matplotlib >= 3.5",   # Added: used in analyse mode for plotting
  "tqdm >= 4.60",         # Added: used for progress bars in src_parser and analyse
  "tree-sitter",           # For C code parsing
  "tree-sitter-c",         # C language support for tree-sitter
]

# Optional dependencies for specific use cases
[project.optional-dependencies]
# Development
dev = [
    "ruff==0.11.7",
    "pre-commit",
]

# Testing
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
    "coverage[toml]>=7.0",
    "ruff==0.11.7",
    "mypy>=0.910",
    "bandit>=1.7",
    "safety>=2.3",
]

# Documentation building
docs = [
    "sphinx==7.4.7",
    "pandoc",
    "furo",
    "sphinx_autodoc_typehints",
    "ipython",
    "sphinx_gallery",
    "pillow",
    "sphinx-toolbox",
    "sphinx-copybutton",
    "readthedocs-sphinx-search",
]

# Project urls
[project.urls]
"Homepage" = "https://github.com/WillJRoper/swiftsim-utils"
"Bug Reports" = "https://github.com/WillJRoper/swiftsim-utils/issues"
"Source" = "https://github.com/WillJRoper/swiftsim-utils/tree/main/src/swiftsim-utils"
"Documentation" = "..."

# Entry points
[project.scripts]
swift-cli="swiftsim_cli.cli:main"

# Set up the build system
[build-system]

# Use latest setuotools, setuptools_scm for git versioning and
# numpy (numpy includes are needed for compilation of C extensions)
requires = ["setuptools>=64", "setuptools_scm>=8", "numpy>=1.23"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

# Make a version file at build time
version_file = "src/swiftsim_cli/_version.py"

# Configure the linter and formatter
[tool.ruff]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    ".DS_Store",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".pre-commit-config.yaml",
    "*__init__.py"  # ignore all init files
]

# PEP-8 line length
line-length = 79
indent-width = 4


# Assume Python 3.8 by default regardless
target-version = "py38"


[tool.ruff.lint]
select = ["F", "E", "W", "D"]
ignore = [
       "E402",  # "module level import not at top of file" (isolate C imports in case python alternatives exist)
       "F811",  # "redefinition of unused name from line N" (breaks quantity objects)
       ]


# Sort imports alphabetically
extend-select = ["I"]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
# For every .py under examples/, ignore all D-rules
"examples/**/*.py" = ["D"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src/swiftsim_cli",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=50",
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/swiftsim_cli"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/test_*",
    "src/swiftsim_cli/_version.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True tests
